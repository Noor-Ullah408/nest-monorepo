// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.1
//   protoc               v3.12.4
// source: proto/user-manage.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "userManagement";

export interface Empty {
}

export interface Users {
  users: User[];
}

export interface CreateUserDto {
  email: string;
  password: string;
}

export interface FindOneUserDto {
  id: number;
  email: string;
}

export interface UpdateUserDto {
  id: number;
  name: string;
  email: string;
  password: string;
}

export interface User {
  id: number;
  name: string;
  email: string;
  password: string;
}

export const USER_MANAGEMENT_PACKAGE_NAME = "userManagement";

export interface UserManagementServiceClient {
  findAllUsers(request: Empty): Observable<Users>;

  findOneUser(request: FindOneUserDto): Observable<User>;

  createUser(request: CreateUserDto): Observable<User>;

  updateUser(request: UpdateUserDto): Observable<User>;

  deleteUser(request: FindOneUserDto): Observable<User>;
}

export interface UserManagementServiceController {
  findAllUsers(request: Empty): Promise<Users> | Observable<Users> | Users;

  findOneUser(request: FindOneUserDto): Promise<User> | Observable<User> | User;

  createUser(request: CreateUserDto): Promise<User> | Observable<User> | User;

  updateUser(request: UpdateUserDto): Promise<User> | Observable<User> | User;

  deleteUser(request: FindOneUserDto): Promise<User> | Observable<User> | User;
}

export function UserManagementServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findAllUsers", "findOneUser", "createUser", "updateUser", "deleteUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserManagementService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserManagementService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_MANAGEMENT_SERVICE_NAME = "UserManagementService";
